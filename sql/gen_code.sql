/*
 Navicat Premium Data Transfer

 Source Server         : mysql-dev(10.124.206.112)
 Source Server Type    : MySQL
 Source Server Version : 50732
 Source Host           : 10.124.206.112:3306
 Source Schema         : gen_code

 Target Server Type    : MySQL
 Target Server Version : 50732
 File Encoding         : 65001

 Date: 22/03/2021 17:29:46
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for t_code_database_info
-- ----------------------------
DROP TABLE IF EXISTS `t_code_database_info`;
CREATE TABLE `t_code_database_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '名称',
  `db_driver` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'com.mysql.jdbc.Driver' COMMENT '数据库驱动',
  `db_url` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '数据库地址',
  `db_username` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '数据库账户',
  `db_password` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '连接密码',
  `db_type` int(11) NOT NULL DEFAULT 1 COMMENT '数据库类型(1:mysql)',
  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 23 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '数据库链接信息' ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of t_code_database_info
-- ----------------------------
INSERT INTO `t_code_database_info` VALUES (22, 'device-manage', 'com.mysql.jdbc.Driver', 'jdbc:mysql://10.124.206.112:3306/device_manage', 'root', 'eagleLab@2020', 1, '2021-03-22 03:04:50', '2021-03-22 03:04:50');

-- ----------------------------
-- Table structure for t_code_params
-- ----------------------------
DROP TABLE IF EXISTS `t_code_params`;
CREATE TABLE `t_code_params`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '别名',
  `author` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '作者',
  `package_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '包路径',
  `local_path` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '本地路径',
  `copyright` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '版权信息',
  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '生成模板的基础信息' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_code_params
-- ----------------------------
INSERT INTO `t_code_params` VALUES (1, 'da.feng', 'da.feng', 'com.tcl.iot.cloud.device', '', '/**\n * Copyright (c) 2021 ABC.Co.Ltd. All rights reserved.\n */', '2018-08-03 23:47:00', '2021-03-22 03:07:12');

-- ----------------------------
-- Table structure for t_code_template
-- ----------------------------
DROP TABLE IF EXISTS `t_code_template`;
CREATE TABLE `t_code_template`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `template_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '模板名称',
  `template_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '模板类型',
  `template_engine_type` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '模板引擎类型',
  `template_desc` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '模板描述',
  `template_path` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '模板路径',
  `template_content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '模板内容',
  `template_file_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '模板生成文件名称',
  `group_id` bigint(20) NOT NULL COMMENT '组ID',
  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '模板信息' ROW_FORMAT = COMPACT;

-- ----------------------------
-- Records of t_code_template
-- ----------------------------
INSERT INTO `t_code_template` VALUES (1, 'controller', 'Java', 'Freemarker', 'interfaces-生成Controller', 'controller', '${data.copyright}\n\npackage ${data.packageName}.interfaces.controller;\n\nimport com.tcl.iot.cloud.commons.response.IotResponse;\nimport ${data.packageName}.interfaces.facade.${data.className}FacadeService;\nimport ${data.packageName}.interfaces.facade.dto.${data.className}DTO;\nimport ${data.packageName}.interfaces.facade.dto.${data.className}SaveDTO;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n\n/**\n * \n * @author ${data.author}\n **/\n<#--一般一个表就定义一个主键,如果属性值存在,就是下标为0的值,不存在就是空值-->\n<#assign pkProperty=data.pkColumns[0].javaFieldName!\"\">\n<#assign pkPropertyType=data.pkColumns[0].javaType!\"\">\n@RestController\n@Slf4j\n@Tag(name = \"${data.className}Controller\")\n@SuppressWarnings(\"PMD.BeanMembersShouldSerialize\")\npublic class ${data.className}Controller {\n\n    @Autowired\n    private ${data.className}FacadeService ${data.classVarName}FacadeService;\n\n\n	 \n    @Operation(summary = \"根据Id查询\")\n    @GetMapping(\"/${data.classVarName}/{${pkProperty}}\")\n    public IotResponse<${data.className}DTO> info(@PathVariable(\"${pkProperty}\") ${pkPropertyType} ${pkProperty}) {\n        log.info(\"Query ${data.classVarName} , ${pkProperty}: {}\", ${pkProperty});\n        ${data.className}DTO ${data.classVarName}DTO = ${data.classVarName}FacadeService.findById(${pkProperty});\n        log.info(\"Response query ${data.classVarName}, result={}\", ${data.classVarName}DTO);\n        return IotResponse.ofSuccess(${data.classVarName}DTO);\n    }\n\n	 \n    @Operation(summary = \"保存\")\n    @PostMapping(\"/${data.classVarName}\")\n    public IotResponse<Boolean> save(@RequestBody ${data.className}SaveDTO ${data.classVarName}SaveDTO) {\n        log.info(\"Save ${data.classVarName} , details: {}\", ${data.classVarName}SaveDTO);\n        ${data.classVarName}FacadeService.save(${data.classVarName}SaveDTO);\n        return IotResponse.ofSuccess(Boolean.TRUE);\n    }\n\n    @Operation(summary = \"根据id删除\")\n    @DeleteMapping(\"/${data.classVarName}/{${pkProperty}}\")\n    public IotResponse<Boolean> deleteById(@PathVariable(\"${pkProperty}\") ${pkPropertyType} ${pkProperty}) {\n        log.info(\"Delete ${data.classVarName} , ${pkProperty}: {}\", ${pkProperty});\n        ${data.classVarName}FacadeService.deleteById(${pkProperty});\n        return IotResponse.ofSuccess(Boolean.TRUE);\n    }\n\n}\n', 'Controller.java', 6, '2018-08-08 20:10:55', '2021-03-22 09:17:14');
INSERT INTO `t_code_template` VALUES (2, 'facadeService', 'Java', 'Freemarker', 'interfaces-生成facadeService', 'service', '${data.copyright}\n\npackage ${data.packageName}.interfaces.facade;\n\n\nimport ${data.packageName}.interfaces.facade.dto.${data.className}DTO;\nimport ${data.packageName}.interfaces.facade.dto.${data.className}SaveDTO;\n\n\n/**\n * FacadeService\n *\n * @author ${data.author}\n */\n <#--一般一个表就定义一个主键,如果属性值存在,就是下标为0的值,不存在就是空值-->\n <#assign pkProperty=data.pkColumns[0].javaFieldName!\"\">\n <#assign pkPropertyType=data.pkColumns[0].javaType!\"\">\npublic interface ${data.className}FacadeService {\n\n\n\n    /**\n     * 根据id返回信息\n     * @param id     ${pkProperty}\n     * @return       ${data.className}DTO\n     */\n    ${data.className}DTO findById(${pkPropertyType} ${pkProperty});\n\n\n    /**\n     * 根据ID删除\n     *\n     * @param id     ${pkProperty}\n     */\n    void deleteById(${pkPropertyType} ${pkProperty});\n\n    /**\n     * 保存\n     *\n     * @param ${data.classVarName}SaveDTO   数据\n     */\n    void save(${data.className}SaveDTO ${data.classVarName}SaveDTO);\n\n\n	\n}', 'FacadeService.java', 6, '2018-08-04 21:22:47', '2021-03-22 09:13:17');
INSERT INTO `t_code_template` VALUES (3, 'facadeServiceImpl', 'Java', 'Freemarker', 'interfaces-生成facadeServiceImpl', 'service.impl', '${data.copyright}\n\npackage ${data.packageName}.interfaces.facade.internal;\n\n\n\nimport ${data.packageName}.application.${data.className}ApplicationService;\nimport ${data.packageName}.domain.${data.classVarName}.${data.className};\nimport ${data.packageName}.interfaces.facade.dto.${data.className}DTO;\nimport ${data.packageName}.interfaces.facade.dto.${data.className}SaveDTO;\nimport ${data.packageName}.interfaces.facade.${data.className}FacadeService;\nimport ${data.packageName}.interfaces.facade.internal.assembler.${data.className}DTOAssembler;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n *  ${data.className}FacadeServiceImpl\n *\n *  @author ${data.author}\n */\n<#--一般一个表就定义一个主键,如果属性值存在,就是下标为0的值,不存在就是空值-->\n<#assign pkProperty=data.pkColumns[0].javaFieldName!\"\">\n<#assign pkPropertyType=data.pkColumns[0].javaType!\"\">\n@Service\n@Slf4j\n@SuppressWarnings({\"PMD.BeanMembersShouldSerialize\", \"PMD.DataflowAnomalyAnalysis\"})\npublic class ${data.className}FacadeServiceImpl implements ${data.className}FacadeService {\n     		\n		\n    @Autowired\n    private ${data.className}ApplicationService ${data.classVarName}ApplicationService;\n	 \n	@Autowired\n    private ${data.className}DTOAssembler ${data.classVarName}DTOAssembler;\n\n\n    @Override\n    public ${data.className}DTO findById(${pkPropertyType} ${pkProperty}) {\n    	${data.className} ${data.classVarName} = ${data.classVarName}ApplicationService.findById(${pkProperty});\n		return ${data.classVarName}DTOAssembler.from(${data.classVarName});\n    }\n\n    @Override\n    public void save(${data.className}SaveDTO ${data.classVarName}SaveDTO) {\n		${data.className} ${data.classVarName} = ${data.classVarName}DTOAssembler.to(${data.classVarName}SaveDTO);\n		${data.classVarName}ApplicationService.save(${data.classVarName});\n    }\n\n\n    @Override\n    @Transactional(rollbackFor = RuntimeException.class)\n    public void deleteById(${pkPropertyType} ${pkProperty}) {\n	    ${data.classVarName}ApplicationService.deleteById(${pkProperty});\n    }\n\n\n}', 'FacadeServiceImpl.java', 6, '2018-08-07 11:24:03', '2021-03-22 09:13:33');
INSERT INTO `t_code_template` VALUES (4, 'repository', 'Java', 'Freemarker', 'domain-生成Repository文件', 'repository', '${data.copyright}\n\npackage ${data.packageName}.domain.${data.classVarName};\n\n\nimport com.tcl.iot.cloud.domain.respository.Repository;\n\n\n/**\n * interface ${data.className}Repository\n *\n * @author ${data.author}\n */\n <#--一般一个表就定义一个主键,如果属性值存在,就是下标为0的值,不存在就是空值-->\n<#assign pkProperty=data.pkColumns[0].javaFieldName!\"\">\n<#assign pkPropertyType=data.pkColumns[0].javaType!\"\">\npublic interface ${data.className}Repository extends Repository<${data.className}, ${pkPropertyType}> {\n		\n\n}', 'Repository.java', 6, '2018-08-08 19:46:29', '2021-03-22 09:14:01');
INSERT INTO `t_code_template` VALUES (5, 'saveDTO', 'Java', 'Freemarker', 'interfaces-生成saveDTO', 'dto', '${data.copyright}\n\npackage ${data.packageName}.interfaces.facade.dto;\n\nimport java.io.Serializable;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n/**\n * dto:(${data.className}SaveDTO)\n *\n * @author ${data.author}\n */\n\n@Getter\n@Setter\n@ToString\n@Tag(name = \"${data.className}SaveDTO\")\npublic class ${data.className}SaveDTO implements Serializable {\n\n   \n	private static final long serialVersionUID = 0L;\n\n<#list data.columns as c>\n    \n	<#if c.javaFieldName == \'createdBy\' || c.javaFieldName == \'createdTime\' || c.javaFieldName == \'lastModifiedBy\' || c.javaFieldName == \'lastModifiedTime\'>\n	<#else>\n	\n	<#if c.javaFieldComment == \'\'>\n    @Schema(title = \"${c.javaFieldName}\"<#if c.isNullable == \'NO\'>, required=true</#if>)\n    <#else>\n    @Schema(title = \"${c.javaFieldComment}\"<#if c.isNullable == \'NO\'>, required=true</#if>)\n    </#if>\n    private ${c.javaType} ${c.javaFieldName};\n	\n	</#if>\n	\n</#list>	\n	\n\n}', 'SaveDTO.java', 6, '2018-08-08 19:53:31', '2021-03-22 09:18:28');
INSERT INTO `t_code_template` VALUES (6, 'dto', 'Java', 'Freemarker', 'interfaces-生成dto', 'dto', '${data.copyright}\n\npackage ${data.packageName}.interfaces.facade.dto;\n\nimport java.io.Serializable;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport java.time.LocalDateTime;\n\n\n/**\n * dto:(${data.className}DTO)\n *\n * @author ${data.author}\n */\n\n@Getter\n@Setter\n@ToString\n@Tag(name = \"${data.className}DTO\")\npublic class ${data.className}DTO implements Serializable {\n\n   \n	private static final long serialVersionUID = 0L;\n\n<#list data.columns as c>\n    /**\n     * ${c.javaFieldComment?if_exists}\n     */\n    <#if c.javaFieldComment == \'\'>\n    @Schema(title = \"${c.javaFieldName}\")\n    <#else>\n    @Schema(title = \"${c.javaFieldComment}\")\n    </#if>\n    private ${c.javaType} ${c.javaFieldName};\n</#list>	\n	\n\n}', 'DTO.java', 6, '2018-08-08 19:58:56', '2021-03-22 09:14:21');
INSERT INTO `t_code_template` VALUES (7, 'entity', 'Java', 'Freemarker', 'domain-生成Entity', 'entity', '${data.copyright}\n\npackage ${data.packageName}.domain.${data.classVarName};\n\nimport com.tcl.iot.cloud.device.domain.BaseEntity;\nimport lombok.Getter;\nimport lombok.Setter;\nimport javax.persistence.*;\n\n/**\n * TABLE_NAME:(${data.tableName})\n *\n *  @author ${data.author}\n */\n\n@Getter\n@Setter\n@Entity(name =\"${data.tableName}\")\n@SuppressWarnings(\"PMD.BeanMembersShouldSerialize\")\npublic class ${data.className} extends BaseEntity<${data.className}> {\n\n\n<#list data.columns as c>\n\n    <#if c.javaFieldName == \'id\' || c.javaFieldName == \'createdBy\' || c.javaFieldName == \'createdTime\' || c.javaFieldName == \'lastModifiedBy\' || c.javaFieldName == \'lastModifiedTime\'>\n    <#else>\n	/**\n     * ${c.javaFieldComment?if_exists}\n     */\n	@Column\n    private ${c.javaType} ${c.javaFieldName};\n    </#if>\n	\n</#list>	\n	@Override\n    public void verifyDataAndFillDefaultBeforeInsert() {\n        \n    }\n	\n\n}', 'Entity.java', 6, '2018-08-08 20:00:20', '2021-03-22 09:14:27');
INSERT INTO `t_code_template` VALUES (8, 'mapper.xml', 'Xml', 'Freemarker', '生成mybaits的Xml', 'mapper', '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${data.packageName}.mapper.${data.className}Mapper\">\n\n	<resultMap id=\"BaseResultMap\" type=\"${data.packageName}.bean.${data.className}Bean\">\n		<#list data.columns as c>\n		<result column=\"${c.columnName}\" jdbcType=\"${c.columnType}\" property=\"${c.javaFieldName}\" />\n		</#list>\n	</resultMap>\n\n\n	<sql id=\"Base_Column_List\">\n		<#list data.columns as c>\n		`${c.columnName}`<#if c_has_next>,</#if>\n		</#list>\n	</sql>\n\n\n</mapper>', 'Mapper.xml', 3, '2018-08-08 20:09:19', '2018-08-09 11:29:46');
INSERT INTO `t_code_template` VALUES (9, 'vue', 'Html', 'Freemarker', '生成vue文件', 'html', '<template>\r\n    <section>\r\n        <!--工具条-->\r\n        <el-col :span=\"24\" class=\"toolbar\" style=\"padding-bottom: 0px;\">\r\n\r\n            <el-form align=\"right\" :inline=\"true\"  class=\"demo-form-inline\">\r\n                <el-form-item label=\"\">\r\n                    <el-input v-model=\"filters.xxxxx\" placeholder=\"查询条件没写，自己写.....\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"\">\r\n                    <el-button type=\"primary\" v-on:click=\"searchData\">查询</el-button>\r\n                </el-form-item>\r\n                <el-form-item label=\"\">\r\n                    <el-button type=\"primary\" @click=\"handleEditOrAdd\">新增</el-button>\r\n                </el-form-item>\r\n            </el-form>\r\n        </el-col>\r\n\r\n        <!--列表-->\r\n        <el-table :data=\"list\"  height=\"500\" highlight-current-row v-loading=\"listLoading\" @selection-change=\"selsChange\"\r\n                  style=\"width: 100%;\">\r\n            <el-table-column type=\"selection\" ></el-table-column>\r\n           <#list data.columns as c>\r\n             <el-table-column prop=\"${c.javaFieldName}\" label=\"${c.propertyCname?if_exists}\"   sortable></el-table-column>\r\n           </#list>\r\n\r\n            <el-table-column  fixed=\"right\" label=\"操作\" width=\"150\">\r\n                <template slot-scope=\"scope\">\r\n                    <el-button size=\"small\" @click=\"handleEditOrAdd(scope.$index, scope.row)\">编辑</el-button>\r\n                    <el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\">删除</el-button>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n\r\n        <!--工具条-->\r\n        <el-col :span=\"24\" style=\"margin-top: 10px\">\r\n            <el-button type=\"danger\" @click=\"batchRemove\" :disabled=\"this.sels.length===0\">批量删除</el-button>\r\n            <el-pagination\r\n                    background\r\n                    @size-change=\"handleSizeChange\"\r\n                    @current-change=\"handleCurrentChange\"\r\n                    :current-page=\"pageNum\"\r\n                    :page-sizes=\"[10, 20, 30, 40]\"\r\n                    :page-size=\"pageSize\"\r\n                    layout=\"total, sizes, prev, pager, next, jumper\"\r\n                    :total=\"total\" style=\"float: right\">\r\n            </el-pagination>\r\n        </el-col>\r\n\r\n        <!--编辑界面-->\r\n        <el-dialog :title=\"title\" v-model=\"formVisible\" :visible.sync=\"formVisible\">\r\n            <el-form :model=\"form\" label-width=\"80px\" :rules=\"formRules\" ref=\"form\">\r\n            <#list data.columns as c>\r\n               <el-form-item label=\"${c.javaFieldComment?if_exists}\" prop=\"${c.javaFieldName}\">\r\n                  <el-input v-model=\"form.${c.javaFieldName}\" auto-complete=\"off\"></el-input>\r\n               </el-form-item>\r\n            </#list>\r\n\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click.native=\"formVisible = false\">取消</el-button>\r\n                <el-button type=\"primary\" @click.native=\"submit\" :loading=\"loading\">提交</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </section>\r\n</template>\r\n\r\n<script>\r\n    import {get${data.className}List, remove${data.className}, batchRemove${data.className}, edit${data.className}, add${data.className}} from \'../../api/api\';\r\n\r\n    export default {\r\n        data() {\r\n            return {\r\n                filters: {\r\n                    name: \'\',\r\n                },\r\n                list: [],\r\n                total: 0,\r\n                title:\"\",//弹出框标题\r\n                pageNum: 1, //当前页码\r\n                pageSize: 10,//页数\r\n                listLoading: false,\r\n                sels: [],//列表选中列\r\n                formVisible: false,//新增 or 编辑界面是否显示\r\n                loading: false,\r\n                formRules: {\r\n                    name: [{required: true, message: \'请输入姓名\', trigger: \'blur\'}]\r\n                },\r\n                //新增 or 编辑界面数据\r\n                form: {\r\n                  <#list data.columns as c>\r\n                      ${c.javaFieldName}:\'\' <#if c_has_next>,</#if>\r\n                  </#list>\r\n                },\r\n\r\n            }\r\n        },\r\n        methods: {\r\n            //切换页数\r\n            handleCurrentChange(val) {\r\n                this.pageNum = val;\r\n                this.getData();\r\n            },\r\n            //处理分页条数\r\n            handleSizeChange(val) {\r\n                this.pageSize = val;\r\n                this.getData();\r\n            },\r\n            searchData(){\r\n                this.pageNum = 1;\r\n                this.getData();\r\n            },\r\n            //获取用户列表\r\n            getData() {\r\n                let para = {\r\n                   // xxxxx: this.filters.xxxxx,\r\n                    pageInfo: {\r\n                        pageNum: this.pageNum,\r\n                        pageSize: this.pageSize,\r\n                    }\r\n                };\r\n                this.listLoading = true;\r\n                get${data.className}List(para).then((res) => {\r\n                    this.listLoading = false;\r\n                    if (res.code === 1) {\r\n                        this.total = res.data.total;\r\n                        this.list = res.data.list;\r\n                    }\r\n                }, () => { this.listLoading = false; });\r\n            },\r\n            //删除\r\n            handleDel: function (index, row) {\r\n                this.$confirm(\'确认删除该记录吗?\', \'提示\', {\r\n                    type: \'warning\'\r\n                }).then(() => {\r\n                    this.listLoading = true;\r\n                    let para = {id: row.id};\r\n                    remove${data.className}(para).then((res) => {\r\n                        this.listLoading = false;\r\n                        if (res.code === 1) {\r\n                            this.success(\"删除成功\");\r\n                            this.getData();\r\n                        }\r\n                    });\r\n                }).catch(() => {});\r\n            },\r\n            //显示编辑/新增界面\r\n            handleEditOrAdd: function (index, row) {\r\n                if (row) {\r\n                    this.title= \"编辑\";\r\n                    this.form = Object.assign({}, row);\r\n                } else {\r\n                    this.title= \"新增\";\r\n                    this.form = {};\r\n                }\r\n                this.formVisible = true;\r\n            },\r\n            //编辑\r\n            submit: function () {\r\n                this.$refs.form.validate((valid) => {\r\n                    if (valid) {\r\n                        this.$confirm(\'确认提交吗？\', \'提示\', {}).then(() => {\r\n                            this.loading = true;\r\n                            let para = this.form;\r\n                            if(para.id) {\r\n                                edit${data.className}(para).then((res) => {\r\n                                    this.loading = false;\r\n                                    if (res.code === 1){\r\n                                        this.success(\"修改成功\");\r\n                                        this.$refs[\'form\'].resetFields();\r\n                                        this.formVisible = false;\r\n                                        this.getData();\r\n                                     }\r\n                                })\r\n                            } else {\r\n                                add${data.className}(para).then((res) => {\r\n                                    this.loading = false;\r\n                                    if (res.code === 1) {\r\n                                        this.success(\"新增成功\");\r\n                                        this.$refs[\'form\'].resetFields();\r\n                                        this.formVisible = false;\r\n                                        this.getData();\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n\r\n            selsChange: function (sels) {\r\n                this.sels = sels;\r\n            },\r\n            //批量删除\r\n            batchRemove: function () {\r\n                var ids = this.sels.map(item => item.id).toString();\r\n                this.$confirm(\'确认删除选中记录吗？\', \'提示\', {\r\n                    type: \'warning\'\r\n                }).then(() => {\r\n                    this.listLoading = true;\r\n                    let para = {ids: ids};\r\n                    batchRemove${data.className}(para).then((res) => {\r\n                        this.listLoading = false;\r\n                        if (res.code === 1) {\r\n                            this.success(\"删除成功\");\r\n                            this.getData();\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n\r\n            success: function(message){\r\n                this.$message({\r\n                    message: message,\r\n                    type: \'success\'\r\n                });\r\n            }\r\n        },\r\n        mounted() {\r\n            this.getData();\r\n        }\r\n    }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>', '.vue', 3, '2018-08-09 09:08:17', '2018-08-09 11:29:47');
INSERT INTO `t_code_template` VALUES (11, 'applicationService', 'Java', 'Freemarker', 'application-生成applicationService模板', 'service', '${data.copyright}\n\npackage ${data.packageName}.application;\n\n\nimport ${data.packageName}.domain.${data.classVarName}.${data.className};\n\n\n\n/**\n * ${data.className}ApplicationService\n *\n * @author ${data.author}\n */\n <#--一般一个表就定义一个主键,如果属性值存在,就是下标为0的值,不存在就是空值-->\n <#assign pkProperty=data.pkColumns[0].javaFieldName!\"\">\n <#assign pkPropertyType=data.pkColumns[0].javaType!\"\">\npublic interface ${data.className}ApplicationService {\n\n\n\n    /**\n     * 根据id返回信息\n     * @param id     ${pkProperty}\n     * @return       ${data.className}\n     */\n    ${data.className} findById(${pkPropertyType} ${pkProperty});\n\n\n    /**\n     * 根据ID删除\n     *\n     * @param id     ${pkProperty}\n     */\n    void deleteById(${pkPropertyType} ${pkProperty});\n\n    /**\n     * 保存\n     *\n     * @param ${data.classVarName}   数据\n     */\n    void save(${data.className} ${data.classVarName});\n\n\n	\n}', 'ApplicationService.java', 6, '2021-03-22 06:57:00', '2021-03-22 09:14:35');
INSERT INTO `t_code_template` VALUES (12, 'applicationServiceImpl', 'Java', 'Freemarker', 'application-生成applicationServiceImpl', 'service.impl', '${data.copyright}\n\npackage ${data.packageName}.application.impl;\n\n\n\nimport ${data.packageName}.application.${data.className}ApplicationService;\nimport ${data.packageName}.domain.${data.classVarName}.${data.className};\nimport ${data.packageName}.domain.${data.classVarName}.${data.className}Repository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n/**\n *  ${data.className}ApplicationServiceImpl\n *\n *  @author ${data.author}\n */\n<#--一般一个表就定义一个主键,如果属性值存在,就是下标为0的值,不存在就是空值-->\n<#assign pkProperty=data.pkColumns[0].javaFieldName!\"\">\n<#assign pkPropertyType=data.pkColumns[0].javaType!\"\">\n@Component\n@Slf4j\n@SuppressWarnings({\"PMD.BeanMembersShouldSerialize\", \"PMD.DataflowAnomalyAnalysis\"})\npublic class ${data.className}ApplicationServiceImpl implements ${data.className}ApplicationService {\n     		\n		\n    @Autowired\n    private ${data.className}Repository ${data.classVarName}Repository;\n	 \n\n\n    @Override\n    public ${data.className} findById(${pkPropertyType} ${pkProperty}) {\n		return ${data.classVarName}Repository.findById(${pkProperty}).orElse(null);\n    }\n\n    @Override\n    public void save(${data.className} ${data.classVarName}) {\n		if(${data.classVarName}.getId() == null){\n            ${data.classVarName}.fillPrivacyDataFromSource(null);\n        }else{\n            ${data.className} exist = ${data.classVarName}Repository.findById(${data.classVarName}.getId()).orElse(null);\n			${data.classVarName}.fillPrivacyDataFromSource(exist);\n        }\n		${data.classVarName}Repository.save(${data.classVarName});\n    }\n\n\n    @Override\n    public void deleteById(${pkPropertyType} ${pkProperty}) {\n	    ${data.classVarName}Repository.deleteById(${pkProperty});\n    }\n\n\n}', 'ApplicationServiceImpl.java', 6, '2021-03-22 06:59:13', '2021-03-22 09:26:19');
INSERT INTO `t_code_template` VALUES (13, 'repositoryJpa', 'Java', 'Freemarker', 'infrastructure-生成RepositoryJpa文件', 'repository', '${data.copyright}\n\npackage ${data.packageName}.infrastructure.persistence.mysql;\n\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport ${data.packageName}.domain.${data.classVarName}.${data.className};\nimport ${data.packageName}.domain.${data.classVarName}.${data.className}Repository;\n\n\n/**\n * interface ${data.className}RepositoryJpa\n *\n * @author ${data.author}\n */\n <#--一般一个表就定义一个主键,如果属性值存在,就是下标为0的值,不存在就是空值-->\n<#assign pkProperty=data.pkColumns[0].javaFieldName!\"\">\n<#assign pkPropertyType=data.pkColumns[0].javaType!\"\">\npublic interface ${data.className}RepositoryJpa extends ${data.className}Repository, JpaRepository<${data.className}, ${pkPropertyType}> {\n		\n\n}', 'RepositoryJpa.java', 6, '2021-03-22 07:32:47', '2021-03-22 09:14:51');
INSERT INTO `t_code_template` VALUES (14, 'assembler', 'Java', 'Freemarker', 'interfaces-生成assembler', 'dto', '${data.copyright}\n\npackage ${data.packageName}.interfaces.facade.internal.assembler;\n\nimport cn.hutool.core.bean.BeanUtil;\nimport ${data.packageName}.domain.${data.classVarName}.${data.className};\nimport ${data.packageName}.interfaces.facade.dto.${data.className}DTO;\nimport ${data.packageName}.interfaces.facade.dto.${data.className}SaveDTO;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n/**\n *  ${data.className}ApplicationServiceImpl\n *\n *  @author ${data.author}\n */\n<#--一般一个表就定义一个主键,如果属性值存在,就是下标为0的值,不存在就是空值-->\n<#assign pkProperty=data.pkColumns[0].javaFieldName!\"\">\n<#assign pkPropertyType=data.pkColumns[0].javaType!\"\">\n@Component\n@Slf4j\n@SuppressWarnings({\"PMD.BeanMembersShouldSerialize\", \"PMD.DataflowAnomalyAnalysis\"})\npublic class ${data.className}DTOAssembler {\n     		\n	public ${data.className} to(${data.className}DTO dto) {\n        if (null == dto) {\n            return null;\n        }\n        return BeanUtil.toBean(dto, ${data.className}.class);\n    }\n	\n	public ${data.className} to(${data.className}SaveDTO dto) {\n        if (null == dto) {\n            return null;\n        }\n        return BeanUtil.toBean(dto, ${data.className}.class);\n    }\n\n    public ${data.className}DTO from(${data.className} ${data.classVarName}) {\n        if (null == ${data.classVarName}) {\n            return null;\n        }\n        return BeanUtil.toBean(${data.classVarName}, ${data.className}DTO.class);\n    }\n\n}', 'DTOAssembler.java', 6, '2021-03-22 08:16:45', '2021-03-22 09:15:01');

-- ----------------------------
-- Table structure for t_code_template_engine
-- ----------------------------
DROP TABLE IF EXISTS `t_code_template_engine`;
CREATE TABLE `t_code_template_engine`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `engine_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '模板引擎名称',
  `engine_desc` varchar(400) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '模板引擎描述',
  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '模板引擎' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_code_template_engine
-- ----------------------------
INSERT INTO `t_code_template_engine` VALUES (1, 'Freemarker', 'Freemarker模板引擎', '2018-08-09 12:37:19', '2018-08-09 12:37:19');

-- ----------------------------
-- Table structure for t_code_template_group
-- ----------------------------
DROP TABLE IF EXISTS `t_code_template_group`;
CREATE TABLE `t_code_template_group`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `group_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '组名称',
  `group_desc` varchar(400) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '描述',
  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `update_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '模板组' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_code_template_group
-- ----------------------------
INSERT INTO `t_code_template_group` VALUES (6, 'da.feng', 'da.feng的模板', '2021-03-22 03:05:40', '2021-03-22 03:45:33');

SET FOREIGN_KEY_CHECKS = 1;
